<%- include("../../views/partials/admin/header") %>

  <style>
    /* Same CSS styles from previous version */
    .tracking-steps {
      margin-top: 20px;
      margin-bottom: 20px;
      position: relative;
      display: flex;
      justify-content: space-between;
    }

    .step {
      position: relative;
      text-align: center;
      flex: 1;
    }

    .circle {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      background-color: #ddd;
      line-height: 40px;
      color: #555;
      font-weight: bold;
      border: 2px solid #ddd;
      margin: 0 auto;
      z-index: 2;
      position: relative;
    }

    .circle.active {
      background-color: #0d6efd;
      color: white;
      border-color: #0d6efd;
    }

    .circle.completed {
      background-color: #198754;
      color: white;
      border-color: #198754;
    }

    .step-label {
      font-size: 14px;
      margin-top: 8px;
    }

    .step-line {
      position: absolute;
      top: 20px;
      left: 50%;
      height: 4px;
      width: 100%;
      background-color: #ddd;
      transform: translateX(0%) translateY(-50%);
      z-index: 1;
    }

    .step-line.completed-line {
      background-color: #198754;
    }

    .step:not(:last-child)::after {
      content: none;
    }
  </style>

  <div class="container p-4">
    <h2 class="mb-4 text-center">Order Details</h2>

    <div class="d-flex justify-content-between align-items-start flex-wrap mb-3">
      <div>
        <h5>Order ID: <span class="text-muted">
            <%= order._id %>
          </span></h5>
        <h6>Placed on: <span class="text-muted">
            <%= new Date(order.createdOn).toLocaleString() %>
          </span></h6>
        <h6>Status:
          <span
            class="badge bg-<%= order.status === 'delivered' ? 'success' : order.status === 'pending' ? 'warning' : order.status === 'return_requested' ? 'warning': order.status === 'confirmed' ? 'primary' : order.status === 'shipped' ? 'info' : 'secondary' %>">
            <%= order.status %>
          </span>
        </h6>
      </div>

      <div class="d-flex gap-2 flex-wrap">
        <% if (!['cancelled', 'delivered' ].includes(order.status)) { %>
          <button onclick="updateOrderStatus('<%= order._id %>')" class="btn btn-sm btn-primary">
            Update Status
          </button>

          <button onclick="cancelOrder('<%= order._id %>')" class="btn btn-sm btn-danger" type="submit">Cancel
            Order</button>
          <% } %>

            <a href="/admin/orders" class="btn btn-secondary btn-sm ">← Back to Orders</a>
      </div>
    </div>

    <% order.products.forEach((product, index)=> {
      const steps = ['pending', 'confirmed', 'shipped', 'delivered'];
      const currentIndex = steps.indexOf(product.status);
      %>
      <div class="mb-4 border rounded p-3 shadow-sm">

        <% if (product.status==='return_requested' ) { %>
          <div class="card-body">
            <!-- Product Info -->
            <div class="d-flex align-items-center mb-3">
              <img src="<%= product.image %>" alt="Product" width="60" height="60" class="me-3"
                style="object-fit: cover;">
              <div>
                <p class="mb-1"><strong>Product Name:</strong>
                  <%= product.name %>
                </p>
                <p class="mb-1"><strong>Quantity:</strong>
                  <%= product.quantity %>
                </p>
                <p class="mb-1"><strong>Price:</strong> ₹<%= product.price %>
                </p>
                <p class="mb-1">
                  <strong>Status:</strong>
                  <span class="badge bg-<%= product.status === 'return_requested' ? 'warning' : 'secondary' %>">
                    <%= product.status %>
                  </span>
                </p>
              </div>
            </div>

            <!-- Return Reason -->
            <div class="mb-3">
              <strong>Return Reason:</strong>
              <p>
                <%= product.returnReason || 'Not provided' %>
              </p>
            </div>

            <!-- Return Description -->
            <div class="mb-3">
              <strong>Return Description:</strong>
              <p>
                <%= product.returnDescription || 'Not provided' %>
              </p>
            </div>

            <!-- Return Images -->
            <% if (product.returnImages && product.returnImages.length> 0) { %>
              <div class="mb-3">
                <strong>Return Images:</strong>
                <div class="d-flex gap-2 mt-2 flex-wrap">
                  <% product.returnImages.forEach(image=> { %>
                    <img src="/<%= image %>" alt="Return image" class="img-thumbnail"
                      style="width: 100px; height: 100px; object-fit: cover;">
                    <% }); %>
                </div>
              </div>
              <% } %>

                <!-- Action Buttons -->
                <div class="mt-4">
                  <button onclick="handleReturn('approve', '<%= order._id %>', '<%= product.itemId %>')"
                    class="btn btn-success me-2">Approve Return</button>
                  <button onclick="handleReturn('reject', '<%= order._id %>', '<%= product.itemId %>')"
                    class="btn btn-danger">Reject Return</button>
                </div>
          </div>

          <% } else { %>
            <!-- Normal Product Detail and Tracking -->
            <div class="d-flex justify-content-between align-items-start">
              <h5>Product <%= index + 1 %>: <%= product.name %>
              </h5>
              <div class="d-flex flex-wrap gap-2 mt-2">
                <% if (product.status==='returning' && product.requestStatus==='approved' ) { %>
                  <button onclick="updateReturnStatus('<%= order._id %>', '<%= product.itemId %>')"
                    class="btn btn-sm btn-primary">Update Return Status</button>
                  <% } else if (!['cancelled', 'delivered' , 'returned' , 'Return_requested' , 'returning'
                    ].includes(product.status)) { %>
                    <button onclick="updateStatus('<%= order._id %>', '<%= product.itemId %>')"
                      class="btn btn-sm btn-primary">Update</button>
                    <button onclick="cancelProductOrder('<%= order._id %>', '<%= product.itemId %>')"
                      class="btn btn-sm btn-danger">Cancel</button>
                    <% } %>
              </div>
            </div>

            <div class="d-flex align-items-center mb-3">
              <img src="<%= product.image %>" alt="Product" width="60" height="60" class="me-3"
                style="object-fit: cover;">
              <div>
                <p class="mb-1"><strong>Qty:</strong>
                  <%= product.quantity %>
                </p>
                <p class="mb-1"><strong>Total Price:</strong> ₹<%= product.amount %>
                </p>
                <p class="mb-1"><strong>Status:</strong>
                  <span
                    class="badge bg-<%= product.status === 'delivered' ? 'success' : product.status === 'pending' ? 'warning' : product.status === 'confirmed' ? 'primary' : product.status === 'shipped' ? 'info' : 'danger' %>">
                    <%= product.status %>
                  </span>
                </p>
              </div>
            </div>

            <div class="tracking-steps">
              <% steps.forEach((step, stepIndex)=> { %>
                <div class="step text-center flex-fill position-relative">
                  <div class="circle mx-auto 
                <%= stepIndex < currentIndex ? 'completed' : '' %> 
                <%= stepIndex === currentIndex ? 'active' : '' %>">
                    <%= stepIndex + 1 %>
                  </div>
                  <div class="step-label mt-2">
                    <%= step %>
                  </div>
                  <% if(stepIndex < steps.length - 1) { %>
                    <div class="step-line 
                  <%= stepIndex < currentIndex ? 'completed-line' : '' %>">
                    </div>
                    <% } %>
                </div>
                <% }) %>
            </div>
            <% } %>
      </div>
      <% }) %>


        <!-- Customer Info -->
        <div class="mb-4">
          <h5>Customer Information</h5>
          <div class="border p-3 rounded shadow-sm">
            <strong>Name:</strong>
            <%= order.customerName %><br>
              <strong>Address:</strong>
              <%= order.address %><br>
                <strong>Phone:</strong>
                <%= order.phone %><br>
                  <strong>Email:</strong>
                  <%= order.email %>
          </div>
        </div>

        <!-- Order Summary -->
        <div class="mb-4">
          <h5>Order Summary</h5>
          <% const totalAmount=order.products.reduce((sum, p)=> sum + (p.price * p.quantity), 0);
            %>
            <ul class="list-group">
              <li class="list-group-item d-flex justify-content-between">
                <span>Subtotal</span><span>₹<%= order.total %></span>
              </li>
              <li class="list-group-item d-flex justify-content-between">
                <span>Shipping</span><span>₹<%= order.shipping %></span>
              </li>
              <li class="list-group-item d-flex justify-content-between fw-bold">
                <span>Total</span><span>₹<%= order.finalAmount %></span>
              </li>
            </ul>
        </div>
  </div>

  <!-- Rejection Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1">
  <div class="modal-dialog">
      <div class="modal-content">
          <div class="modal-header">
              <h5 class="modal-title">Reject Return Request</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
              <div class="mb-3">
                  <label class="form-label">Rejection Category</label>
                  <select class="form-select" id="rejectionCategory" required>
                      <option value="">Select a category</option>
                      <option value="Invalid reason">Invalid reason</option>
                      <option value="Outside return window">Outside return window</option>
                      <option value="Product condition">Product condition</option>
                      <option value="Policy violation">Policy violation</option>
                      <option value="Other">Other</option>
                  </select>
              </div>
              <div class="mb-3">
                  <label class="form-label">Detailed Explanation</label>
                  <textarea class="form-control" id="rejectionReason" rows="3" placeholder="Please provide a detailed explanation for rejecting the return request..." required></textarea>
              </div>
          </div>
          <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-danger" onclick="submitRejection()">Submit</button>
          </div>
      </div>
  </div>
</div>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <!-- Bootstrap JS -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script>

    let currentOrderId = null;
    let currentProductId = null;

    async function updateStatus(orderId, itemId) {
      const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
          'pending': 'Pending',
          'confirmed': 'Confirmed',
          'shipped': 'Shipped',
          'delivered': 'Delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) return 'You need to select a status!';
        }
      });

      if (status) {
        try {
          const response = await fetch('/admin/orders/update-status', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId, status, itemId }),
          });

          const data = await response.json();
          if (data.success) {
            await Swal.fire({ icon: 'success', title: 'Success', text: 'Order status updated', timer: 1500 });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error(error);
          await Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Update failed' });
        }
      }
    }


    async function updateOrderStatus(orderId) {
      const { value: status } = await Swal.fire({
        title: 'Update Order Status',
        input: 'select',
        inputOptions: {
          'pending': 'Pending',
          'confirmed': 'Confirmed',
          'shipped': 'Shipped',
          'delivered': 'Delivered'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) return 'You need to select a status!';
        }
      });

      if (status) {
        try {
          const response = await fetch('/admin/orders/updateOrderStatus', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId, status }),
          });

          const data = await response.json();
          if (data.success) {
            await Swal.fire({ icon: 'success', title: 'Success', text: 'Order status updated', timer: 1500 });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error(error);
          await Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Update failed' });
        }
      }
    }

    async function cancelProductOrder(orderId, itemId) {
      const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch('/admin/orders/cancelProduct', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId, itemId }),
          });

          const data = await response.json();
          if (data.success) {
            await Swal.fire({ icon: 'success', title: 'Cancelled', text: 'Order cancelled', timer: 1500 });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error(error);
          await Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Cancel failed' });
        }
      }
    }

    async function cancelOrder(orderId) {
      const result = await Swal.fire({
        title: 'Cancel Order',
        text: 'Are you sure?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: 'Yes, cancel it!'
      });

      if (result.isConfirmed) {
        try {
          const response = await fetch('/admin/orders/cancelOrder', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ orderId }),
          });

          const data = await response.json();
          if (data.success) {
            await Swal.fire({ icon: 'success', title: 'Cancelled', text: 'Order cancelled', timer: 1500 });
            location.reload();
          } else {
            throw new Error(data.message);
          }
        } catch (error) {
          console.error(error);
          await Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Cancel failed' });
        }
      }
    }

    async function handleReturn(action, orderId, productId) {
      currentOrderId = orderId;
      currentProductId = productId;
    
    if (action === 'reject') {
        const modal = new bootstrap.Modal(document.getElementById('rejectModal'));
        modal.show();
        return;
    }

    if (action === 'approve') {
        Swal.fire({
            title: 'Are you sure?',
            text: "You are about to approve this return request!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, approve it!'
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch('/admin/orders/handle-return', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            orderId: orderId,
                            productId: productId,
                            action: action
                        })
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        Swal.fire(
                            'Approved!',
                            'Return request has been approved.',
                            'success'
                        ).then(() => {
                            location.reload();
                        });
                    } else {
                        throw new Error(data.message);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    Swal.fire(
                        'Error!',
                        error.message || 'Failed to approve return request',
                        'error'
                    );
                }
            }
        });
    }
}

async function submitRejection() {
    const category = document.getElementById('rejectionCategory').value;
    const reason = document.getElementById('rejectionReason').value;

    if (!category || !reason.trim()) {
        Swal.fire('Validation Error', 'Both category and explanation are required.', 'warning');
        return;
    }

    try {
        const response = await fetch('/admin/orders/handle-return', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                orderId: currentOrderId,
                productId: currentProductId,
                action: 'reject',
                rejectionCategory: category,
                rejectionReason: reason.trim()
            })
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire('Rejected!', 'Return request has been rejected.', 'success').then(() => {
                const modal = bootstrap.Modal.getInstance(document.getElementById('rejectModal'));
                modal.hide();
                location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error(error);
        Swal.fire('Error', error.message || 'Failed to reject return', 'error');
    }
}



async function updateReturnStatus(orderId, productId) {
    const { value: status } = await Swal.fire({
        title: 'Update Return Status',
        input: 'select',
        inputOptions: {
            'returning': 'Returning',
            'returned': 'Returned'
        },
        inputPlaceholder: 'Select status',
        showCancelButton: true,
        inputValidator: (value) => {
            if (!value) {
                return 'You need to select a status!';
            }
        }
    });

    if (status) {
        try {
            const response = await fetch('/admin/orders/update-return-status', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, status, productId }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return status updated successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        } catch (error) {
            console.error('Error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Failed to update status'
            });
        }
    }
}
  </script>