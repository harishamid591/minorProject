<%- include("../../views/partials/admin/header") %>

<div class="container-fluid p-4">
  <h2 class="mb-4 text-center">Order Management</h2>
  <form class="row mb-3 g-2 align-items-center" method="GET" action="/admin/orders">
    <div class="col-md-10">
      <input
        type="text"
        name="search"
        class="form-control"
        placeholder="Search by Order ID, Customer Name..."
        value="<%= typeof search !== 'undefined' ? search : '' %>"
      />
    </div>
    <div class="col-auto">
      <button type="submit" class="btn btn-primary">
        <i class="bi bi-search"></i> Search
      </button>
    </div>
    <div class="col-auto">
      <a href="/admin/orders" class="btn btn-secondary">
        <i class="bi bi-x-circle"></i> Clear
      </a>
    </div>
  </form>
  
  <div class="table-responsive">
    <table class="table table-bordered table-hover bg-white text-center align-middle">
      <thead class="table-dark align-middle">
        <tr>
          <th>Order ID</th>
          <th>Date</th>
          <th>Customer Name</th>
          <th style="min-width: 250px;">Products</th>
          <th>Status</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody>
        <% orders.forEach(order => { %>
          <tr>
            <td><%= order._id %></td>
            <td><%= order.date %></td>
            <td><%= order.customerName %></td>
            <td class="text-start">
              <div style="max-height: 150px; overflow-y: auto;" class="d-flex flex-column gap-2">
                <% order.products.forEach(product => { %>
                  <div class="d-flex align-items-center gap-2 border-bottom pb-1">
                    <img src="<%= product.image %>" alt="Product" width="40" height="40" style="object-fit: cover;" />
                    <div>
                      <strong><%= product.name %></strong><br />
                      Qty: <%= product.quantity %> |
                      â‚¹<%= product.amount %> |
                      <span class="badge 
                        <%= product.status.toLowerCase() === 'delivered' ? 'bg-success' :
                            product.status.toLowerCase() === 'pending' ? 'bg-warning text-dark' :
                            product.status.toLowerCase() === 'cancelled' ? 'bg-danger' : 'bg-secondary' %>">
                        <%= product.status %>
                      </span>
                    </div>
                  </div>
                <% }) %>
              </div>
            </td>
            <td>
              <span class="badge 
                <%= order.status.toLowerCase() === 'delivered' ? 'bg-success' :
                    order.status.toLowerCase() === 'pending' ? 'bg-warning text-dark' :
                    order.status.toLowerCase() === 'cancelled' ? 'bg-danger' : 'bg-primary' %>">
                <%= order.status %>
              </span>
              <% if (order.status.toLowerCase() === 'cancelled' && order.cancelledAt) { %>
                <div class="text-danger mt-1" style="font-size: 0.8rem;">
                  Cancelled on: <%= new Date(order.cancelledAt).toLocaleString() %>
                </div>
              <% } %>
            </td>
            <td>
                <div class="d-flex flex-column gap-2">
                  <a href="/admin/viewOrderDetails/<%= order._id %>" class="btn btn-sm btn-info w-100">View</a>
              
                  <% if (order.status === 'Return_requested' && order.requestStatus === 'pending') { %>
                    <button onclick="handleReturn('approve', '<%= order._id %>')" class="btn btn-sm btn-success w-100">Approve Return</button>
                    <button onclick="handleReturn('reject', '<%= order._id %>')" class="btn btn-sm btn-danger w-100">Reject Return</button>
              
                  <% } else if (order.status === 'returning' && order.requestStatus === 'approved') { %>
                    <button onclick="updateReturnStatus('<%= order._id %>')" class="btn btn-sm btn-primary w-100">Update Return Status</button>
              
                  <% } else if (!['cancelled', 'delivered', 'returned'].includes(order.status.toLowerCase())) { %>
                    <button onclick="updateOrderStatus('<%= order._id %>')" class="btn btn-sm btn-warning w-100">Update</button>
                    <button onclick="cancelOrder('<%= order._id %>')" class="btn btn-sm btn-danger w-100">Cancel</button>
                  <% } %>
                </div>
              </td>
              
          </tr>
        <% }) %>
      </tbody>
    </table>

    <% if (totalPages > 1) { %>
      <nav aria-label="Page navigation" class="mt-4">
        <ul class="pagination justify-content-center">
          <% for (let i = 1; i <= totalPages; i++) { %>
            <li class="page-item <%= i === currentPage ? 'active' : '' %>">
              <a class="page-link" href="?page=<%= i %>"><%= i %></a>
            </li>
          <% } %>
        </ul>
      </nav>
    <% } %>

  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>
  async function updateOrderStatus(orderId) {
  const { value: status } = await Swal.fire({
    title: 'Update Order Status',
    input: 'select',
    inputOptions: {
      'pending': 'Pending',
      'confirmed': 'Confirmed',
      'shipped': 'Shipped',
      'delivered': 'Delivered'
    },
    inputPlaceholder: 'Select status',
    showCancelButton: true,
    inputValidator: (value) => {
      if (!value) return 'You need to select a status!';
    }
  });

  if (status) {
    try {
      const response = await fetch('/admin/orders/updateOrderStatus', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, status}),
      });

      const data = await response.json();
      if (data.success) {
        await Swal.fire({ icon: 'success', title: 'Success', text: 'Order status updated', timer: 1500 });
        location.reload();
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      console.error(error);
      await Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Update failed' });
    }
  }
}

async function cancelOrder(orderId) {
  const result = await Swal.fire({
    title: 'Cancel Order',
    text: 'Are you sure?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, cancel it!'
  });

  if (result.isConfirmed) {
    try {
      const response = await fetch('/admin/orders/cancelOrder', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId }),
      });

      const data = await response.json();
      if (data.success) {
        await Swal.fire({ icon: 'success', title: 'Cancelled', text: 'Order cancelled', timer: 1500 });
        location.reload();
      } else {
        throw new Error(data.message);
      }
    } catch (error) {
      console.error(error);
      await Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Cancel failed' });
    }
  }
}
</script>
