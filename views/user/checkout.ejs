<%- include("../../views/partials/user/header") %>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<style>
  body {
    background-color: #f1f3f6;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }
  /* your existing styles here (unchanged)... */
  .checkout-container {
    padding: 2rem 1rem;
  }
  .section-title {
    font-weight: 700;
  }
  .address-card {
    position: relative;
    border: 1px solid #dee2e6;
    border-radius: 12px;
    padding: 1rem 1rem 1rem 1.5rem;
    margin-bottom: 1.5rem;
    background-color: #fff;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06);
    transition: transform 0.2s ease, box-shadow 0.3s ease;
  }
  .address-card:hover {
    transform: scale(1.01);
    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.08);
  }
  .address-card input[type="radio"]:checked + label {
    border-left: 5px solid #198754;
    padding-left: 12px;
    font-weight: 500;
  }
  .form-check-label {
    cursor: pointer;
    width: 100%;
  }
  .btn-edit-address {
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 0.85rem;
  }
  .btn-add-address {
    margin-top: 1rem;
    font-weight: 600;
  }
  .product-list-wrapper {
    max-height: 300px;
    overflow-y: auto;
    padding-right: 0.5rem;
  }
  .product-summary-card {
    background-color: #fff;
    border-radius: 12px;
    padding: 1rem;
    margin-bottom: 1rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    display: flex;
    align-items: center;
  }
  .product-summary-card img {
    width: 80px;
    height: 80px;
    object-fit: cover;
    border-radius: 8px;
    margin-right: 1rem;
    border: 1px solid #ddd;
  }
  .product-summary-card h6 {
    margin: 0;
    font-weight: 600;
    color: #333;
  }
  .total-summary {
    background-color: #fff;
    padding: 1.5rem;
    border-radius: 12px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
  }
  .total-summary h5 {
    font-weight: 600;
    color: #2d3436;
  }
  .total-summary hr {
    margin: 1rem 0;
  }
  .btn-place-order {
    font-size: 1.1rem;
    padding: 0.75rem;
    font-weight: 600;
  }
  .product-list-wrapper::-webkit-scrollbar {
    width: 6px;
  }
  .product-list-wrapper::-webkit-scrollbar-thumb {
    background-color: #bbb;
    border-radius: 10px;
  }
  .product-list-wrapper::-webkit-scrollbar-thumb:hover {
    background-color: #888;
  }
</style>

<div class="container checkout-container">
  <div class="row">
    <!-- Address Section -->
    <div class="col-md-6 mb-4">
      <h4 class="section-title mb-3">Select Delivery Address</h4>
      <% userAddresses.forEach((address, index) => { %>
        <div class="address-card">
          <button class="btn btn-sm btn-outline-secondary btn-edit-address" onclick="openEditModal('<%= address._id %>')"> Edit</button>
          <div class="form-check">
            <input class="form-check-input" type="radio" name="selectedAddress" 
              id="address<%= index %>" value="<%= address._id %>" 
              <%= address.isDefault ? 'checked' : '' %>>
              <label class="form-check-label" for="address<%= index %>">
                <strong><%= address.name %></strong><br>
                <%= address.streetAddress %>, <%= address.town %>, <%= address.city %>, <%= address.state %>, <%= address.country %> - <%= address.pincode %><br>
                ðŸ“ž <%= address.phone %>
              </label>
          </div>
        </div>
      <% }) %>
      <button class="btn btn-outline-success btn-add-address w-100" onclick="openAddModal()">âž• Add New Address</button>
    </div>

    <!-- Order Summary Section -->
    <div class="col-md-6">
      <h4 class="section-title mb-3">Order Summary</h4>

      <div class="product-list-wrapper mb-3">
        <% checkoutItems.forEach(item => { %>
          <div class="product-summary-card">
            <img src="<%= item.image %>" alt="<%= item.name %>">
            <div>
              <h6><%= item.name %></h6>
              <p class="mb-1">Qty: <strong><%= item.quantity %></strong></p>
              <p class="mb-1">Price: â‚¹<%= item.price.toFixed(2) %></p>
              <% if (item.discount) { %>
                <p class="mb-1 text-danger">Discount: <%= item.discount %>%</p>
                <p><strong>Item Total:</strong> â‚¹<s><%= (item.price * item.quantity).toFixed(2) %></s> â†’ â‚¹<%= ((item.price * item.quantity) * (1 - item.discount / 100)).toFixed(2) %></p>
              <% } else { %>
                <p><strong>Item Total:</strong> â‚¹<%= (item.price * item.quantity).toFixed(2) %></p>
              <% } %>
            </div>
          </div>
        <% }) %>
      </div>

      <div class="total-summary">
        <h5 class="mb-3">Price Details</h5>
        <p><strong>Total Items:</strong> <%= totalItems %></p>
        <p><strong>Total MRP:</strong> â‚¹<%= totalMRP.toFixed(2) %></p>
        <p><strong>Discount on MRP:</strong> <span class="text-danger">-â‚¹<%= totalDiscount.toFixed(2) %></span></p>
        <p><strong>Shipping Charges:</strong> â‚¹<%= shippingCharges.toFixed(2) %></p>
        <hr>
        <h5><strong>Total Amount:</strong> â‚¹<%= finalPrice.toFixed(2) %></h5>
        <button class="btn btn-success btn-place-order w-100 mt-3"> Place Order</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal for Add/Edit Address -->
<div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <form id="addressForm">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addressModalLabel">Add / Edit Address</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="addressId" name="addressId" value="">
          <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input type="text" class="form-control" id="name" name="name" required>
          </div>
          <div class="mb-3">
            <label for="phone" class="form-label">Phone</label>
            <input type="tel" class="form-control" id="phone" name="phone" required>
          </div>
          <div class="mb-3">
            <label for="streetAddress" class="form-label">Street Address</label>
            <input type="text" class="form-control" id="streetAddress" name="streetAddress" required>
          </div>
          <div class="mb-3">
            <label for="town" class="form-label">Town</label>
            <input type="text" class="form-control" id="town" name="town" required>
          </div>
          <div class="mb-3">
            <label for="city" class="form-label">City</label>
            <input type="text" class="form-control" id="city" name="city" required>
          </div>
          <div class="mb-3">
            <label for="state" class="form-label">State</label>
            <input type="text" class="form-control" id="state" name="state" required>
          </div>
          <div class="mb-3">
            <label for="country" class="form-label">Country</label>
            <input type="text" class="form-control" id="country" name="country" required>
          </div>
          <div class="mb-3">
            <label for="pincode" class="form-label">Pincode</label>
            <input type="text" class="form-control" id="pincode" name="pincode" required pattern="\d{6}" title="6 digit pincode">
          </div>
          <div class="form-check">
            <input type="checkbox" class="form-check-input" id="isDefault" name="isDefault">
            <label class="form-check-label" for="isDefault">Set as default address</label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary" id="saveAddressBtn">Save Address</button>
        </div>
      </div>
    </form>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Bootstrap Modal instance
  const addressModal = new bootstrap.Modal(document.getElementById('addressModal'));
  
  // Store addresses in JS for edit pre-fill
  const addresses = <%- JSON.stringify(userAddresses) %>;

  // Open modal for Add New Address
  function openAddModal() {
    document.getElementById('addressModalLabel').textContent = 'Add New Address';
    document.getElementById('addressForm').reset();
    document.getElementById('addressId').value = '';
    addressModal.show();
  }

  // Open modal for Edit Address (fill fields)
  function openEditModal(id) {
    const address = addresses.find(addr => addr._id === id);
    if (!address) return Swal.fire('Error', 'Address not found', 'error');
    
    document.getElementById('addressModalLabel').textContent = 'Edit Address';
    document.getElementById('addressId').value = address._id;
    document.getElementById('name').value = address.name || '';
    document.getElementById('phone').value = address.phone || '';
    document.getElementById('streetAddress').value = address.streetAddress || '';
    document.getElementById('town').value = address.town || '';
    document.getElementById('city').value = address.city || '';
    document.getElementById('state').value = address.state || '';
    document.getElementById('country').value = address.country || '';
    document.getElementById('pincode').value = address.pincode || '';
    document.getElementById('isDefault').checked = address.isDefault || false;

    addressModal.show();
  }

  // Handle Add/Edit form submit
  document.getElementById('addressForm').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const id = document.getElementById('addressId').value;
    const data = {
      name: this.name.value.trim(),
      phone: this.phone.value.trim(),
      streetAddress: this.streetAddress.value.trim(),
      town: this.town.value.trim(),
      city: this.city.value.trim(),
      state: this.state.value.trim(),
      country: this.country.value.trim(),
      pincode: this.pincode.value.trim(),
    //   isDefault: this.isDefault.checked
    };
    
    if(id){
        data.addressId = id;
    }

    try {
      let response;
      if (id) {
        // Edit existing address
        response = await fetch('/editAddress', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify(data)
        });
      } else {
        // Add new address
        response = await fetch('/addAddress', {
          method: 'POST',
          headers: {'Content-Type': 'application/json'},
          body: JSON.stringify(data)
        });
      }
      
      if (!response.ok) throw new Error('Failed to save address');
      
      const result = await response.json();
      addressModal.hide();
      
      Swal.fire({
        icon: 'success',
        title: id ? 'Address updated!' : 'Address added!',
        timer: 1500,
        showConfirmButton: false
      }).then(() => {
        // Reload to update address list or implement client-side update
        location.reload();
      });
    } catch (error) {
      Swal.fire('Error', error.message, 'error');
    }
  });

  // Place order button handler
  // document.querySelector('.btn-place-order').addEventListener('click', function() {
  //   const selectedAddressId = document.querySelector('input[name="selectedAddress"]:checked');
  //   if (!selectedAddressId) {
  //     return Swal.fire('Please select a delivery address', '', 'warning');
  //   }
    
  //   Swal.fire({
  //     title: 'Confirm your order?',
  //     text: 'Make sure your selected address is correct.',
  //     icon: 'question',
  //     showCancelButton: true,
  //     confirmButtonText: 'Yes, place order',
  //     cancelButtonText: 'Cancel'
  //   }).then(result => {
  //     if (result.isConfirmed) {
  //       // Proceed with order placement logic here
  //       // Example: submit form or call API to place order
        
  //       // For demo:
  //       Swal.fire('Order placed!', 'Your order has been successfully placed.', 'success');
  //     }
  //   });
  // });

  document.querySelector('.btn-place-order').addEventListener('click', async () => {
  // Get selected address ID
  const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
  if (!selectedAddressRadio) {
    return Swal.fire('Select Address', 'Please select a delivery address to proceed.', 'warning');
  }
  
  const addressId = selectedAddressRadio.value;

  // Prepare order data to send
  const orderData = {
    addressId,
    paymentMethod:'cod'
    // You can also send cart info if you want, or backend can retrieve it from session/db
  };

  // try {
  //   const response = await fetch('/placeOrder', {
  //     method: 'POST',
  //     headers: { 'Content-Type': 'application/json' },
  //     body: JSON.stringify(orderData)
  //   });

  //   if (!response.ok) throw new Error('Order placement failed.');

  //   const result = await response.json();

  //   if (result.success) {
  //     Swal.fire('Order Placed!', 'Your order has been placed successfully.', 'success')
  //       .then(() => {
  //         // Redirect to order confirmation page or reload
  //         window.location.href = '/orders/' + result.orderId;
  //       });
  //   } else {
  //     Swal.fire('Error', result.message || 'Failed to place order.', 'error');
  //   }
  // } catch (error) {
  //   Swal.fire('Error', error.message, 'error');
  // }

  try {
    const response = await fetch('/placeOrder', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(orderData)
    });

    if (!response.ok) throw new Error('Order placement failed.');

    const result = await response.json();

    if (result.success) {
      Swal.fire('Order Placed!', 'Your order has been placed successfully.', 'success')
      Swal.fire({
                title: 'Your order has been placed successfully!',
                text: `Order IDs: ${result.orderId}`,
                icon: 'success',
                confirmButtonText: 'View Orders'
            })
            .then((result) => {
                if (result.isConfirmed) {
                    window.location.href = '/orders';
                }
            });
    } else {
      Swal.fire('Error', result.message || 'Failed to place order.', 'error');
    }
  } catch (error) {
    Swal.fire('Error', error.message, 'error');
  }
});

</script>

<%- include("../../views/partials/user/footer") %>
