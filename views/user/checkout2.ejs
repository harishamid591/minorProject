<%- include("../../views/partials/user/header") %>

  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

  <style>
    body {
      background-color: #eef1f6;
      font-family: 'Segoe UI', Roboto, sans-serif;
    }

    .checkout-container {
      padding: 2rem 1rem;
    }

    .section-title {
      font-weight: 700;
      font-size: 1.4rem;
      color: #2c3e50;
    }

    .address-card {
      border: none;
      border-radius: 10px;
      padding: 1.25rem;
      margin-bottom: 1.2rem;
      background-color: #ffffff;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.06);
      transition: all 0.2s ease;
      position: relative;
    }

    .address-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.08);
    }

    .form-check-label {
      cursor: pointer;
      display: block;
    }

    .address-card input[type="radio"]:checked+label {
      border-left: 4px solid #0d6efd;
      padding-left: 14px;
      background-color: #f0f8ff;
    }

    .btn-edit-address {
      position: absolute;
      top: 12px;
      right: 12px;
      font-size: 0.85rem;
      background-color: #f8f9fa;
      border: 1px solid #ced4da;
      padding: 0.25rem 0.5rem;
      border-radius: 4px;
    }

    .btn-add-address {
      margin-top: 1rem;
      font-weight: 500;
      background-color: #0d6efd;
      color: #fff;
      border: none;
      padding: 0.6rem 1rem;
      border-radius: 6px;
    }

    .btn-add-address:hover {
      background-color: #084298;
    }

    .product-summary-card {
      background-color: #fff;
      border-radius: 10px;
      padding: 1rem;
      display: flex;
      align-items: center;
      box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
      margin-bottom: 1rem;
    }

    .product-summary-card img {
      width: 75px;
      height: 75px;
      border-radius: 6px;
      margin-right: 1rem;
      border: 1px solid #ddd;
    }

    .product-summary-card h6 {
      margin: 0;
      font-weight: 600;
      color: #2f3640;
    }

    .total-summary {
      background: linear-gradient(135deg, #ffffff, #ffffff);
      border-radius: 12px;
      padding: 1.8rem 2rem;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;

    }

    .total-summary h5 {
      font-weight: 700;
      font-size: 1.6rem;
      margin-bottom: 1rem;

      letter-spacing: 0.03em;
      border-bottom: 2px solid #90caf9;
      padding-bottom: 0.3rem;
    }

    .total-summary p {
      margin-bottom: 0.75rem;
      font-size: 1rem;
      display: flex;
      justify-content: space-between;
      font-weight: 600;
      border-bottom: 1px solid #cfd8dc;
      padding-bottom: 0.3rem;
    }



    .total-summary p .text-danger {
      font-weight: 700;
      color: #c62828 !important;
    }

    .total-summary hr {
      margin: 1.5rem 0;
      border-color: #bbdefb;
      border-style: dashed;
    }

    #couponCode {
      border-radius: 50px;
      border: 1.5px solid #64b5f6;
      padding-left: 1rem;
      font-size: 1rem;
      transition: border-color 0.3s ease;
    }

    #couponCode:focus {
      border-color: #1976d2;
      box-shadow: 0 0 6px #1976d2;
      outline: none;
    }

    #applyCouponBtn {
      border-radius: 50px;
      padding: 0.45rem 1.2rem;
      font-weight: 600;
      border: none;
      transition: background-color 0.3s ease;
    }

    #couponFeedback {
      font-size: 0.9rem;
      margin-top: 0.3rem;
    }

    .total-summary h5.total-amount {
      font-size: 1.8rem;
      color: #2e7d32;
      margin-top: 1rem;
      font-weight: 800;
      text-align: right;
      letter-spacing: 0.05em;
    }


    .btn-place-order {
      width: 100%;
      padding: 0.75rem;
      font-size: 1rem;
      font-weight: 600;
      background-color: #198754;
      color: #fff;
      border: none;
      border-radius: 6px;
    }

    .btn-place-order:hover {
      background-color: #145c32;
    }

    .product-list-wrapper {
      max-height: 320px;
      overflow-y: auto;
      padding-right: 0.5rem;
    }

    .product-list-wrapper::-webkit-scrollbar {
      width: 6px;
    }

    .product-list-wrapper::-webkit-scrollbar-thumb {
      background-color: #adb5bd;
      border-radius: 10px;
    }

    .product-list-wrapper::-webkit-scrollbar-thumb:hover {
      background-color: #6c757d;
    }

    .modal-content {
      border-radius: 10px;
      box-shadow: 0 6px 20px rgba(0, 0, 0, 0.1);
    }

    .modal-header {
      background-color: #f8f9fa;
      border-bottom: 1px solid #dee2e6;
    }

    .modal-footer {
      background-color: #f8f9fa;
      border-top: 1px solid #dee2e6;
    }

    .form-control {
      border-radius: 6px;
    }

    .form-check-input:checked {
      background-color: #198754;
      border-color: #198754;
    }

    .payment-method-section {
      background-color: #f8f9fa;
      border: 1px solid #ced4da;
      border-radius: 8px;
    }
  </style>


  <div class="container checkout-container">
    <div class="row">
      <!-- Address Section -->
      <div class="col-md-6 mb-4">
        <h4 class="section-title mb-3">Select Delivery Address</h4>
        <% userAddresses.forEach((address, index)=> { %>
          <div class="address-card">
            <button class="btn btn-sm btn-outline-secondary btn-edit-address"
              onclick="openEditModal('<%= address._id %>')"> Edit</button>
            <div class="form-check">
              <input class="form-check-input" type="radio" name="selectedAddress" id="address<%= index %>"
                value="<%= address._id %>" <%=address.isDefault ? 'checked' : '' %>>
              <label class="form-check-label" for="address<%= index %>">
                <strong>
                  <%= address.name %>
                </strong><br>
                <%= address.streetAddress %>, <%= address.town %>, <%= address.city %>, <%= address.state %>, <%=
                          address.country %> - <%= address.pincode %><br>
                            ðŸ“ž <%= address.phone %>
              </label>
            </div>
          </div>
          <% }) %>
            <button class="btn btn-outline-success btn-add-address w-100" onclick="openAddModal()">âž• Add New
              Address</button>
      </div>

      <!-- Order Summary Section -->
      <div class="col-md-6">
        <h4 class="section-title mb-3">Order Summary</h4>

        <div class="product-list-wrapper mb-3">
          <% checkoutItems.forEach(item=> { %>
            <div class="product-summary-card">
              <img src="<%= item.image %>" alt="<%= item.name %>">
              <div>
                <h6>
                  <%= item.name %>
                </h6>
                <p class="mb-1">Qty: <strong>
                    <%= item.quantity %>
                  </strong></p>
                <p class="mb-1">Price: â‚¹<%= item.price.toFixed(2) %>
                </p>
                <% if (item.discount) { %>
                  <p class="mb-1 text-danger">Discount: <%= item.discount %>%</p>
                  <p><strong>Item Total:</strong> â‚¹<s>
                      <%= (item.price * item.quantity).toFixed(2) %>
                    </s> â†’ â‚¹<%= ((item.price * item.quantity) * (1 - item.discount / 100)).toFixed(2) %>
                  </p>
                  <% } else { %>
                    <p><strong>Item Total:</strong> â‚¹<%= (item.price * item.quantity).toFixed(2) %>
                    </p>
                    <% } %>
              </div>
            </div>
            <% }) %>
        </div>

        <div class="total-summary">
          <h5 class="mb-3">Price Details</h5>
          <p><strong>Total Items:</strong>
            <%= totalItems %>
          </p>
          <p><strong>Total MRP:</strong> â‚¹<%= totalMRP.toFixed(2) %>
          </p>
          <p><strong>Discount on MRP:</strong> <span class="text-danger">-â‚¹<%= totalDiscount.toFixed(2) %></span></p>
          <p><strong>Shipping Charges:</strong> â‚¹<%= shippingCharges.toFixed(2) %>
          </p>
          <hr>
          <div class="mb-3">
            <label for="couponCode" class="form-label">Have a coupon?</label>
            <div class="input-group">
              <input type="text" class="form-control" id="couponCode" placeholder="Enter coupon code">
              <button class="btn btn-outline-primary" id="applyCouponBtn" type="button">Apply</button>
            </div>
            <small id="couponFeedback" class="text-success d-none"></small>
          </div>
          <div class="payment-method-section p-3 mb-3 border rounded bg-light">
            <h5 class="section-title mb-3">Choose Payment Method</h5>

            <div class="form-check mb-2">
              <input class="form-check-input" type="radio" name="payment" id="paymentCOD" value="cod">
              <label class="form-check-label" for="paymentCOD">Cash on Delivery</label>
            </div>

            <div class="form-check mb-2">
              <input class="form-check-input" type="radio" name="payment" id="paymentOnline" value="razorpay">
              <label class="form-check-label" for="paymentOnline">Online Payment (UPI/Card)</label>
            </div>

            <div class="form-check">
              <input class="form-check-input" type="radio" name="payment" id="paymentWallet" value="wallet">
              <label class="form-check-label" for="paymentWallet">Wallet Balance</label>
            </div>
          </div>


          <h5><strong>Total Amount:</strong> â‚¹<%= finalPrice.toFixed(2) %>
          </h5>

          <button class="btn btn-success btn-place-order w-100 mt-3"> Place Order</button>
        </div>

      </div>
    </div>
  </div>

  <!-- Modal for Add/Edit Address -->
  <div class="modal fade" id="addressModal" tabindex="-1" aria-labelledby="addressModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <form id="addressForm">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="addressModalLabel">Add / Edit Address</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <input type="hidden" id="addressId" name="addressId" value="">
            <div class="mb-3">
              <label for="name" class="form-label">Name</label>
              <input type="text" class="form-control" id="name" name="name" required>
            </div>
            <div class="mb-3">
              <label for="phone" class="form-label">Phone</label>
              <input type="tel" class="form-control" id="phone" name="phone" required>
            </div>
            <div class="mb-3">
              <label for="streetAddress" class="form-label">Street Address</label>
              <input type="text" class="form-control" id="streetAddress" name="streetAddress" required>
            </div>
            <div class="mb-3">
              <label for="town" class="form-label">Town</label>
              <input type="text" class="form-control" id="town" name="town" required>
            </div>
            <div class="mb-3">
              <label for="city" class="form-label">City</label>
              <input type="text" class="form-control" id="city" name="city" required>
            </div>
            <div class="mb-3">
              <label for="state" class="form-label">State</label>
              <input type="text" class="form-control" id="state" name="state" required>
            </div>
            <div class="mb-3">
              <label for="country" class="form-label">Country</label>
              <input type="text" class="form-control" id="country" name="country" required>
            </div>
            <div class="mb-3">
              <label for="pincode" class="form-label">Pincode</label>
              <input type="text" class="form-control" id="pincode" name="pincode" required pattern="\d{6}"
                title="6 digit pincode">
            </div>
            <div class="form-check">
              <input type="checkbox" class="form-check-input" id="isDefault" name="isDefault">
              <label class="form-check-label" for="isDefault">Set as default address</label>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary" id="saveAddressBtn">Save Address</button>
          </div>
        </div>
      </form>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  // Bootstrap Modal instance
  const addressModal = new bootstrap.Modal(document.getElementById('addressModal'));

  // Store addresses in JS for edit pre-fill
  const addresses = <% - JSON.stringify(userAddresses) %>;

  // Open modal for Add New Address
  function openAddModal() {
    document.getElementById('addressModalLabel').textContent = 'Add New Address';
    document.getElementById('addressForm').reset();
    document.getElementById('addressId').value = '';
    addressModal.show();
  }

  // Open modal for Edit Address (fill fields)
  function openEditModal(id) {
    const address = addresses.find(addr => addr._id === id);
    if (!address) return Swal.fire('Error', 'Address not found', 'error');

    document.getElementById('addressModalLabel').textContent = 'Edit Address';
    document.getElementById('addressId').value = address._id;
    document.getElementById('name').value = address.name || '';
    document.getElementById('phone').value = address.phone || '';
    document.getElementById('streetAddress').value = address.streetAddress || '';
    document.getElementById('town').value = address.town || '';
    document.getElementById('city').value = address.city || '';
    document.getElementById('state').value = address.state || '';
    document.getElementById('country').value = address.country || '';
    document.getElementById('pincode').value = address.pincode || '';
    document.getElementById('isDefault').checked = address.isDefault || false;

    addressModal.show();
  }

  // Handle Add/Edit form submit
  document.getElementById('addressForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const id = document.getElementById('addressId').value;
    const data = {
      name: this.name.value.trim(),
      phone: this.phone.value.trim(),
      streetAddress: this.streetAddress.value.trim(),
      town: this.town.value.trim(),
      city: this.city.value.trim(),
      state: this.state.value.trim(),
      country: this.country.value.trim(),
      pincode: this.pincode.value.trim(),
      //   isDefault: this.isDefault.checked
    };

    if (id) {
      data.addressId = id;
    }

    try {
      let response;
      if (id) {
        // Edit existing address
        response = await fetch('/editAddress', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
      } else {
        // Add new address
        response = await fetch('/addAddress', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
      }

      if (!response.ok) throw new Error('Failed to save address');

      const result = await response.json();
      addressModal.hide();

      Swal.fire({
        icon: 'success',
        title: id ? 'Address updated!' : 'Address added!',
        timer: 1500,
        showConfirmButton: false
      }).then(() => {
        // Reload to update address list or implement client-side update
        location.reload();
      });
    } catch (error) {
      Swal.fire('Error', error.message, 'error');
    }
  });


  // function checkStockAvailability() {
  //   return fetch('/check-stock')
  //     .then(response => response.json())
  //     .then(data => {
  //       if (!data.success) {
  //         throw new Error(data.message);
  //       }
  //       return data.items;
  //     });
  // }

  // async function placeOrder() {
  //   try {

  //     console.log('hey')
  //     // Get selected address ID
  //     const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
  //     const paymentMethod = document.querySelector('input[name="payment"]:checked');
  //     if (!selectedAddressRadio) {
  //       return Swal.fire('Select Address', 'Please select a delivery address to proceed.', 'warning');
  //     }


  //     if (!paymentMethod) {
  //       Swal.fire('Error', 'Please select a payment method', 'error');
  //       return;
  //     }

  //     // Check stock availability before proceeding
  //     const stockStatus = await checkStockAvailability();

  //     if (stockStatus.length === 0) {
  //       Swal.fire({
  //         title: 'Cart Empty',
  //         text: 'No items available in stock. Your cart will be cleared.',
  //         icon: 'error',
  //         confirmButtonText: 'Go to Shop'
  //       }).then((result) => {
  //         if (result.isConfirmed) {
  //           window.location.href = '/shop';
  //         }
  //       });
  //       return;
  //     }

  //     // Check for blocked products
  //     const blockedProducts = stockStatus.filter(item => item.isBlocked);
  //     if (blockedProducts.length > 0) {
  //       Swal.fire({
  //         title: 'Products Blocked',
  //         text: 'Some products in your cart have been blocked by admin. The page will reload to update your cart.',
  //         icon: 'warning',
  //         confirmButtonText: 'OK'
  //       }).then(() => {
  //         window.location.reload();
  //       });
  //       return;
  //     }

  //     if (stockStatus.some(item => item.stockChanged)) {
  //       Swal.fire({
  //         title: 'Stock Changed',
  //         text: 'Some items in your cart have limited stock. The quantities have been adjusted.',
  //         icon: 'warning',
  //         confirmButtonText: 'Continue with Available Stock'
  //       }).then((result) => {
  //         if (result.isConfirmed) {
  //           window.location.reload();
  //           proceedWithOrder();
  //         }
  //       });
  //       return;
  //     }
  //     proceedWithOrder();
  //   } catch (error) {
  //     console.error('Error:', error);
  //     Swal.fire('Error', error.message || 'An error occurred while placing the order', 'error');
  //   }
  // }


  // function proceedWithOrder() {
  //   const selectedAddressRadio = document.querySelector('input[name="selectedAddress"]:checked');
  //   const paymentMethod = document.querySelector('input[name="payment"]:checked');

  //   const addressId = selectedAddressRadio.value;

  //   const orderData = {
  //     addressId,
  //     paymentMethod: paymentMethod.value,
  //     couponCode: appliedCoupon ? appliedCoupon.name : null
  //   };

  //   switch (paymentMethod.value) {
  //     case 'cod':
  //       processCODOrder(orderData);
  //       break;
  //     case 'razorpay':
  //       processRazorpayOrder(orderData);
  //       break;
  //     case 'wallet':
  //       processWalletOrder(orderData);
  //       break;
  //   }
  // }



  // function processCODOrder(orderData) {

  //   try {
  //     const response = await fetch('/placeOrder', {
  //       method: 'POST',
  //       headers: { 'Content-Type': 'application/json' },
  //       body: JSON.stringify(orderData)
  //     });

  //     if (!response.ok) throw new Error('Order placement failed.');

  //     const result = await response.json();

  //     if (result.success) {
  //       Swal.fire('Order Placed!', 'Your order has been placed successfully.', 'success')
  //       Swal.fire({
  //         title: 'Your order has been placed successfully!',
  //         text: `Order IDs: ${result.orderId}`,
  //         icon: 'success',
  //         confirmButtonText: 'View Orders'
  //       })
  //         .then((result) => {
  //           if (result.isConfirmed) {
  //             window.location.href = '/orders';
  //           }
  //         });
  //     } else {
  //       Swal.fire('Error', result.message || 'Failed to place order.', 'error');
  //     }
  //   } catch (error) {
  //     Swal.fire('Error', error.message, 'error');
  //   }
  // }

  // document.querySelector('.place-order-btn').onclick = placeOrder;

</script>

  <%- include("../../views/partials/user/footer") %>