<%- include("../../views/partials/user/header") %>

<style>
    .order-details-page {
      max-width: 900px;
      margin: 40px auto;
      background-color: #f8f9fa;
      padding: 30px;
      border-radius: 8px;
      box-shadow: 0 6px 15px rgba(0,0,0,0.1);
    }
  
    .order-details-header {
      border-bottom: 2px solid #dee2e6;
      padding-bottom: 15px;
      margin-bottom: 25px;
    }
  
    .order-details-header h2 {
      font-weight: 700;
      color: #343a40;
    }
  
    .order-info {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 25px;
    }
  
    .order-info div {
      flex: 1 1 250px;
      background: white;
      padding: 15px 20px;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
  
    .order-info div strong {
      display: block;
      margin-bottom: 8px;
      color: #495057;
    }
  
    .products-list {
      background: white;
      border-radius: 8px;
      padding: 20px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.05);
      margin-bottom: 25px;
    }
  
    .product-item {
      display: flex;
      gap: 20px;
      margin-bottom: 20px;
      border-bottom: 1px solid #e9ecef;
      padding-bottom: 15px;
    }
  
    .product-item:last-child {
      border-bottom: none;
    }
  
    .product-item img {
      width: 100px;
      height: 100px;
      object-fit: contain;
      border-radius: 8px;
      background-color: #f0f0f0;
    }
  
    .product-info {
      flex-grow: 1;
    }
  
    .product-info h5 {
      font-weight: 600;
      color: #212529;
      margin-bottom: 8px;
    }
  
    .product-details {
      color: #6c757d;
      font-size: 14px;
    }
  
    .tracking-steps {
      display: flex;
      justify-content: space-between;
      margin-top: 30px;
      margin-bottom: 10px;
      padding: 20px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
  
    .step {
      text-align: center;
      position: relative;
      flex: 1;
    }
  
    .step::before {
      content: "";
      position: absolute;
      top: 12px;
      left: 50%;
      height: 10px;
      width: 100%;
      transform: translateX(-50%);
      background-color: #dee2e6;
      z-index: -1;
    }
  
    .step:first-child::before {
      display: none;
    }
  
    .step .circle {
      width: 25px;
      height: 25px;
      border-radius: 50%;
      margin: auto;
      background-color: #dee2e6;
      line-height: 25px;
      color: #fff;
      font-size: 12px;
    }
  
    .step.active .circle {
      background-color: #0d6efd;
    }
  
    .step.completed .circle {
      background-color: #198754;
    }
  
    .step span {
      display: block;
      margin-top: 8px;
      font-size: 14px;
      color: #495057;
    }
  
    .back-btn {
      display: inline-block;
      margin-top: 25px;
    }
  
    @media (max-width: 600px) {
      .order-info {
        flex-direction: column;
      }
  
      .product-item {
        flex-direction: column;
        align-items: center;
      }
  
      .product-info {
        text-align: center;
      }
  
      .tracking-steps {
        flex-direction: column;
        align-items: center;
        gap: 10px;
      }
  
      .step::before {
        display: none;
      }
    }
  </style>

<%
  const statusSteps = ['Pending', 'Confirmed', 'Shipped', 'Delivered'];
  const currentIndex = statusSteps.findIndex(s => s.toLowerCase() === productItem.status.toLowerCase());
%>

<div class="container">
  <div class="order-details-page">
    <div class="order-details-header d-flex justify-content-between align-items-center flex-wrap">
      <div>
        <h2>Order Details</h2>
        <small>Order ID: <%= order._id %></small>
      </div>
    
      <% if (productItem.status.toLowerCase() === 'pending') { %>
        <button onclick="cancelOrder('<%= order._id %>','<%= productItem._id %>')" class="btn btn-outline-danger btn-md">Cancel Order</button>
      <% } %>
    </div>

    <div class="order-info">
      <div><strong>Placed On</strong><%= new Date(order.createdOn).toLocaleString() %></div>
      <%
        const status = productItem.status;
        let statusClass = 'bg-secondary';
        switch (status.toLowerCase()) {
          case 'cancelled': statusClass = 'bg-danger'; break;
          case 'delivered': statusClass = 'bg-success'; break;
          case 'pending':
          case 'processing':
          case 'placed':
          case 'confirmed': statusClass = 'bg-info text-dark'; break;
          case 'shipped': statusClass = 'bg-primary'; break;
          case 'return_requested': statusClass = 'bg-warning text-dark'; break;
          case 'rejected': statusClass = 'bg-dark'; break;
        }
      %>
      <div>
        <strong>Status</strong>
        <span class="badge <%= statusClass %>"><%= status.charAt(0).toUpperCase() + status.slice(1) %></span>
        <% if (status.toLowerCase() === 'cancelled' && productItem.cancelledAt) { %>
          <div style="margin-top: 5px; color: #dc3545; font-size: 14px;">Cancelled on: <%= new Date(productItem.cancelledAt).toLocaleString() %></div>
        <% } %>
      </div>

      <div><strong>Payment Method</strong><%= order.paymentMethod || 'N/A' %></div>
      <div><strong>Total Amount</strong>₹<%= (productItem.price * productItem.quantity).toFixed(2) %></div>

      <% if(order.address) { %>
        <div style="flex: 1 1 100%;">
          <strong>Shipping Address</strong>
          <div><%= order.address.name %> - <%= order.address.phone %></div>
          <div><%= order.address.streetAddress %>, <%= order.address.town %>, <%= order.address.city %></div>
          <div><%= order.address.state %>, <%= order.address.country %> - <%= order.address.pincode %></div>
        </div>
      <% } %>
    </div>

    <!-- Order Tracking Section -->
    <div class="tracking-steps">
      <% statusSteps.forEach((step, idx) => { %>
        <div class="step <%= idx === currentIndex ? 'active' : '' %> <%= idx < currentIndex ? 'completed' : '' %>">
          <div class="circle"><%= idx + 1 %></div>
          <span><%= step %></span>
        </div>
      <% }) %>
    </div>

    <div class="products-list">
      <div class="product-item">
        <img src="<%= productItem.productImages[0] %>" alt="<%= productItem.productName %>">
        <div class="product-info">
          <h5><%= productItem.productName %></h5>
          <div class="product-details">
            <div>Quantity: <%= productItem.quantity %></div>
            <div>Price per unit: ₹<%= productItem.price %></div>
            <div>Subtotal: ₹<%= (productItem.price * productItem.quantity).toFixed(2) %></div>
            <% if(productItem.productDescription) { %>
              <div>Description: <%= productItem.productDescription %></div>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <!-- Return Order Logic -->
    <% if (productItem.status === 'delivered' && !productItem.returnReason && productItem.requestStatus !== "rejected") { %>
      <div class="card mt-4">
        <div class="card-header">
          <h5 class="mb-0">Return Order 
            <span style="font-size: 10px; color: gray;">
              (Return Window open for 7 days after delivery)
            </span>
          </h5>
        </div>
        <div class="card-body">
          <button class="btn btn-warning" onclick="initiateReturn('<%= order._id %>', '<%= productItem._id %>')">Request Return</button>
        </div>
      </div>
    <% } %>

    <% if (productItem.requestStatus === 'rejected') { %>
      <div class="alert alert-danger mt-3">
        <h6 class="alert-heading">Return Request Rejected</h6>
        <p><strong>Category:</strong> <%= productItem.rejectionCategory %></p>
        <p><strong>Reason:</strong> <%= productItem.rejectionReason %></p>
      </div>
    <% } %>

    <% if (['return_requested', 'returning', 'returned'].includes(productItem.status)) { %>
      <div class="card mt-4">
        <div class="card-header <%= 
          productItem.status === 'returned' ? 'bg-success' :
          productItem.requestStatus === 'approved' ? 'bg-success' : 
          productItem.requestStatus === 'rejected' ? 'bg-danger' : 
          'bg-warning' %> text-white">
          <h5 class="mb-0">Return Status: <%= productItem.status.replace('_', ' ').toUpperCase() %></h5>
        </div>
        <div class="card-body">
          <p><strong>Return Reason:</strong> <%= productItem.returnReason %></p>

          <% if (productItem.status === "returned") { %>
            <p><strong>Returned On:</strong> <%= new Date(productItem.updatedOn).toLocaleDateString() %></p>
          <% } %>

          <% if (productItem.returnImages && productItem.returnImages.length > 0) { %>
            <div class="mt-3">
              <h6>Uploaded Images:</h6>
              <div class="d-flex gap-2 flex-wrap">
                <% productItem.returnImages.forEach(image => { %>
                  <img src="/<%= image %>" alt="Return image" class="img-thumbnail" style="width: 100px;">
                <% }); %>
              </div>
            </div>
          <% } %>

          <% if (productItem.status === 'returned') { %>
            <div class="alert alert-success mt-3">
              <strong>Your product has been returned.</strong><br>
              Amount has been refunded to your wallet.
            </div>
          <% } else if (productItem.requestStatus === 'approved') { %>
            <div class="alert alert-success mt-3">
              Your return request has been approved and is being processed.
            </div>
          <% } else if (productItem.requestStatus === 'rejected') { %>
            <div class="alert alert-danger mt-3">
              <strong>Return Request Rejected</strong><br>
              Reason: <%= productItem.rejectionReason %>
            </div>
          <% } else { %>
            <div class="alert alert-info mt-3">
              Your return request is under review.
            </div>
          <% } %>

          <% if (productItem.status === 'return_requested') { %>
            <button class="btn btn-outline-danger mt-3" onclick="cancelReturn('<%= order._id %>', '<%= productItem._id %>')">
              Cancel Return Request
            </button>
          <% } %>

        </div>
      </div>
    <% } %>

    <a href="/orders" class="btn btn-outline-secondary back-btn">← Back to Orders</a>
  </div>
</div>

<!-- Return Modal -->
<div class="modal fade" id="returnModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Return Request</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="returnForm">
                    <div class="mb-3">
                        <label class="form-label">Return Reason Category</label>
                        <select class="form-select" id="returnReason" required>
                            <option value="">Select a reason</option>
                            <option value="Wrong size">Wrong size</option>
                            <option value="Damaged product">Damaged product</option>
                            <option value="Not as described">Not as described</option>
                            <option value="Quality issues">Quality issues</option>
                            <option value="Other">Other</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Detailed Description</label>
                        <textarea class="form-control" id="returnDescription" rows="3" placeholder="Please provide more details about your return reason..." required></textarea>
                        <small class="text-muted">Please explain the issue in detail to help us better understand your return request.</small>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Upload Images (Optional)</label>
                        <input type="file" class="form-control" id="returnImages" multiple accept="image/*">
                        <small class="text-muted">You can upload up to 3 images</small>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="submitReturn()">Submit Return Request</button>
            </div>
        </div>
    </div>
  </div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>

let currentOrderId = null;
let currentItemId = null;

async function cancelOrder(orderId,itemId) {
  const { value: reasonOption } = await Swal.fire({
      title: 'Cancel Order',
      input: 'select',
      inputLabel: 'Select a reason for cancellation',
      inputOptions: {
          'Ordered by mistake': 'Ordered by mistake',
          'Found a better price': 'Found a better price',
          'Delivery took too long': 'Delivery took too long',
          'Item no longer needed': 'Item no longer needed',
          'Changed my mind': 'Changed my mind',
          'Wrong item ordered': 'Wrong item ordered',
          'Other': 'Other'
      },
      showCancelButton: true
  });

  if (!reasonOption) return;

  let finalReason = reasonOption;

  if (reasonOption === 'Other') {
    const { value: otherReason } = await Swal.fire({
        title: 'Cancel Order',
        input: 'textarea',
        inputLabel: 'Please provide a reason for cancellation',
        inputPlaceholder: 'Type your reason here...',
        showCancelButton: true,
        inputValidator: (value) => {
          if (!value) return 'You need to provide a reason!';
        }
    });

    if (!otherReason) return;
    finalReason = otherReason;
  }

  try {
    const response = await fetch('/orders/cancel', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ orderId, itemId, reason: finalReason }),
    });

    const data = await response.json();

    if (data.success) {
      await Swal.fire({ icon: 'success', title: 'Success', text: 'Order cancelled successfully', timer: 1500 });
      location.reload();
    } else {
      Swal.fire('Failed', result.message || 'Something went wrong.', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    await Swal.fire({ icon: 'error', title: 'Error', text: error.message || 'Failed to cancel order' });
  }
}

async function cancelReturn(orderId, itemId) {
    try {
        const result = await Swal.fire({
            title: 'Cancel Return Request',
            text: 'Are you sure you want to cancel your return request?',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6',
            confirmButtonText: 'Yes, cancel it!'
        });

        if (result.isConfirmed) {
            const response = await fetch('/orders/cancel-return', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId, itemId }),
            });

            const data = await response.json();
            
            if (data.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Return request cancelled successfully',
                    timer: 1500
                });
                location.reload();
            } else {
                throw new Error(data.message);
            }
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to cancel return request'
        });
    }
}

function initiateReturn(orderId, itemId) {
    currentOrderId = orderId;
    currentItemId = itemId;
    const modal = new bootstrap.Modal(document.getElementById('returnModal'));
    modal.show();
}

async function submitReturn() {
    try {
        const reasonSelect = document.getElementById('returnReason');
        const returnDescription = document.getElementById('returnDescription');
        const imagesInput = document.getElementById('returnImages');
        
        const returnReason = reasonSelect.value;
        const description = returnDescription.value;

        if (!returnReason || !description) {
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Please select a reason category and provide a detailed description!',
            });
            return;
        }

        const formData = new FormData();
        formData.append('orderId', currentOrderId);
        formData.append('itemId',currentItemId)
        formData.append('returnReason', returnReason);
        formData.append('returnDescription', description);

        const files = imagesInput.files;
        for (let i = 0; i < Math.min(files.length, 3); i++) {
            formData.append('images', files[i]);
        }

        const response = await fetch('/orders/return', {
            method: 'POST',
            body: formData
        });

        const data = await response.json();
        
        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success!',
                text: 'Return request submitted successfully!',
                confirmButtonText: 'OK'
            }).then(() => {
                location.reload();
            });
        } else {
            throw new Error(data.message);
        }
    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error!',
            text: error.message || 'Failed to submit return request',
        });
    }
}


</script>

<%- include("../../views/partials/user/footer") %>
